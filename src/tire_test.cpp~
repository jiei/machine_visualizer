#include <ros/ros.h>
#include <math.h>
#include <visualization_msgs/MarkerArray.h>
#include <tf/transform_broadcaster.h>
#include "4wheel.h"
	
void copy_marker(visualization_msgs::Marker copy,visualization_msgs::Marker *copied);
	
int main(int argc,char** argv){
	ros::init(argc,argv,"tire_test");
	ros::NodeHandle n;
	ros::Rate r(10);
   
   Steering_4 S(0.6,0.6,0.75*pi,(-1)*0.75*pi);
  	
  	double secs;
  	int count=0;
   
   while(ros::ok()){
   	if(count%10==0)	ROS_INFO("uriuri\r\n");
   	count++;
   	
   	/*secs=ros::Time::now().toSec();
   	transform.setOrigin( tf::Vector3(cos(secs/5.0),sin(secs/5.0),0.0) );
   	q.setRPY(0, 0, secs*pi*2.0/3.0);
  		transform.setRotation(q);
   	br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "/global", "/tire"));*/
   	
   	//secs=ros::Time::now().toSec();
   	
   	S.update();
   	
   	r.sleep();
   }
	return 0;
}

void copy_marker(visualization_msgs::Marker copy,visualization_msgs::Marker *copied){
	copied->header.frame_id = copy.header.frame_id;
	copied->header.stamp = copy.header.stamp;
	copied->ns = copy.ns;
	copied->id = copy.id;
	copied->type = copy.type;
	copied->action = copy.action;
	copied->pose.position.x = copy.pose.position.x;
	copied->pose.position.y = copy.pose.position.y;
	copied->pose.position.z = copy.pose.position.z;
	copied->pose.orientation.x = copy.pose.orientation.x;
	copied->pose.orientation.y = copy.pose.orientation.y;
	copied->pose.orientation.z = copy.pose.orientation.z;
	copied->pose.orientation.w = copy.pose.orientation.w;
	copied->scale.x = copy.scale.x;
	copied->scale.y = copy.scale.y;
	copied->scale.z = copy.scale.z;
	copied->color.a = copy.color.a;
	copied->color.r = copy.color.r; 
	copied->color.g = copy.color.g;
	copied->color.b = copy.color.b;
	copied->lifetime = copy.lifetime;
}

